LIBRARY ieee;
USE ieee.std_logic_1164.ALL;

--ENTITY shiftregister IS
--  GENERIC(SIGNAL_WIDTH : INTEGER := 16;
--          REGISTER_LENGTH : INTEGER := 1000);
--  PORT(clk: IN STD_LOGIC;
--       din: IN STD_LOGIC_VECTOR(SIGNAL_WIDTH-1 DOWNTO 0);
--       dout: OUT STD_LOGIC_VECTOR(SIGNAL_WIDTH*REGISTER_LENGTH-1 DOWNTO 0));
--END shiftregister;
--
--ARCHITECTURE arch_shiftregister OF shiftregister IS
--
--TYPE data_array_type IS ARRAY(0 TO REGISTER_LENGTH-1) OF STD_LOGIC_VECTOR(SIGNAL_WIDTH-1 DOWNTO 0);
--
--SIGNAL data:data_array_type;
--
--COMPONENT singleregister IS
--  GENERIC(SIGNAL_WIDTH : INTEGER := 16);
--  PORT (clk: IN STD_LOGIC;
--        din: IN STD_LOGIC_VECTOR(SIGNAL_WIDTH-1 DOWNTO 0);
--        dout: OUT STD_LOGIC_VECTOR(SIGNAL_WIDTH-1 DOWNTO 0));
--END COMPONENT singleregister;
--
--BEGIN
--  G: FOR i IN 0 TO REGISTER_LENGTH-2 GENERATE
--	register_i:
--        COMPONENT singleregister
--  	GENERIC MAP(SIGNAL_WIDTH => SIGNAL_WIDTH)
--  	PORT MAP(clk => clk,
--                 din => data(i),
--                 dout => data(i+1));
--END GENERATE;
--
--first_register:
--COMPONENT singleregister
--  	GENERIC MAP(SIGNAL_WIDTH => SIGNAL_WIDTH)
--  	PORT MAP(clk => clk,
--                 din => din,
--                 dout => data(0));
--
--shift_process:
--PROCESS(clk)
--BEGIN
--  IF RISING_EDGE(clk) THEN
--    FOR i IN REGISTER_LENGTH-1 DOWNTO 1 LOOP
----      data(i) <= data(i-1);
--      dout(i*SIGNAL_WIDTH-1 DOWNTO (i-1)*SIGNAL_WIDTH) <= data(i-1);
--    END LOOP;
--  END IF;
--END PROCESS shift_process;
--
--END arch_shiftregister

ENTITY shiftregister IS
  GENERIC(SIGNAL_WIDTH : INTEGER := 16;
          REGISTER_LENGTH : INTEGER := 1000);
  PORT(clk: IN STD_LOGIC;
       din: IN STD_LOGIC_VECTOR(SIGNAL_WIDTH-1 DOWNTO 0);
       dout: OUT STD_LOGIC_VECTOR(SIGNAL_WIDTH*REGISTER_LENGTH-1 DOWNTO 0));
END shiftregister;

ARCHITECTURE arch_shiftregister OF shiftregister IS

signal data: STD_LOGIC_VECTOR(SIGNAL_WIDTH*REGISTER_LENGTH-1 DOWNTO 0);
BEGIN
shift_process:
PROCESS(clk)
BEGIN
  IF RISING_EDGE(clk) THEN
   data(SIGNAL_WIDTH*REGISTER_LENGTH-1 DOWNTO SIGNAL_WIDTH) <= data(SIGNAL_WIDTH*(REGISTER_LENGTH-1)-1 DOWNTO 0);
   data(SIGNAL_WIDTH-1 DOWNTO 0) <= din;
   dout <= data;
  END IF;
END PROCESS shift_process;

END arch_shiftregister;
